package me.looka.specialutil;

import java.util.Properties;

/**
 * @author lucamasira
 *
 * A class which wraps around the Properties class to make getting/setting stuff easier.<br>
 * This type of configuration is only recommended when it's about small sets of data.<br>
 * An implementation of IDatabase is preferred when the user has to store a lot of data.
 */
public class Configuration extends Properties {

	/**
	 * SerialVersionUniqueIdentifier so that we can write this to an ObjectStream.<br>
	 * The value was randomly generated by Eclipse.
	 */
	private static final long serialVersionUID = 6498619511948989562L;
	
	/**
	 * The default constructor
	 */
	public Configuration() {
	}
	
	/**
	 * Get a string value from the properties.
	 * @param key the key.
	 * @return the value associated with the key.
	 */
	public String getString(final String key) {
		return getProperty(key);
	}
	
	/**
	 * Set a string value.
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setString(final String key, final String value) {
		setProperty(key, value);
	}
	
	/**
	 * Get a string list from the properties.<br>
	 * Here's an example of a string list:<br>
	 * randomvalue=[hello, world, this is, Java]
	 * @param key the key associated with the value.
	 * @return the list of strings.
	 */
	public String[] getList(final String key) {
		String raw = getString(key).substring(1, getString(key).length()-1);//substring removes the [ and ]
		//return raw if it only contains 1 value
		if(!raw.contains(","))
			return new String[]{raw};
		
		//create string array
		String values[] = raw.split(",");
		
		//basically removes all whitespace before a value so that for example [lol, rekt] doesnt show as value:lol and value: rekt
		//but shows as value:lol and value:rekt
		for(int x = 0; x < values.length; x++) {
			while(values[x].startsWith(" ")) {
				values[x] = values[x].substring(1);
			}
		}
		return values;
	}
	
	/**
	 * Set a String list value
	 * @param key the key to store it to
	 * @param strings the list
	 */
	public void setList(final String key, final String[] strings) {
		StringBuilder sb = new StringBuilder();
		sb.append("[");
		for(String entry : strings) {
			sb.append(entry);
			sb.append(", ");
		}
		sb.append("]");
		setString(key, sb.toString());
	}
	
	/**
	 * Set an int value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setInt(final String key, final int value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Set a short value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setShort(final String key, final short value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Set a long value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setLong(final String key, final long value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Set a float value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setFloat(final String key, final float value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Set a double value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setDouble(final String key, final double value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Set a boolean value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setBoolean(final String key, final boolean value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Set a byte value
	 * @param key the key to bind the value to.
	 * @param value the value associated with the key.
	 */
	public void setByte(final String key, final byte value) {
		setProperty(key, String.valueOf(value));
	}
	
	/**
	 * Get an int value from the properties.
	 * @param key the key
	 * @return the int associated with the key
	 */
	public int getInt(final String key) {
		return Integer.parseInt(getProperty(key));
	}
	
	/**
	 * Get a short value from the properties.
	 * @param key the key
	 * @return the short associated with the key
	 */
	public short getShort(final String key) {
		return Short.parseShort(getProperty(key));
	}
	
	/**
	 * Get a long value from the properties.
	 * @param key the key
	 * @return the long associated with the key
	 */
	public long getLong(final String key) {
		return Long.parseLong(getProperty(key));
	}
	
	/**
	 * Get a float value from the properties.
	 * @param key the key
	 * @return the float associated with the key
	 */
	public float getFloat(final String key) {
		return Float.parseFloat(getProperty(key));
	}
	
	/**
	 * Get a double from the properties.
	 * @param key the key
	 * @return the double associated with the key
	 */
	public double getDouble(final String key) {
		return Double.parseDouble(getProperty(key));
	}
	
	/**
	 * Get a boolean from the properties.
	 * @param key the key
	 * @return the boolean associated with the key
	 */
	public boolean getBoolean(final String key) {
		return Boolean.parseBoolean(getProperty(key));
	}
	
	/**
	 * Get a byte from the properties.
	 * @param key the key
	 * @return the byte associated with the key
	 */
	public byte getByte(final String key) {
		return Byte.parseByte(getProperty(key));
	}
}
